// Code generated by sqlc-proto; DO NOT EDIT.
package proto

import (
    "database/sql"
    
    "time"
    "google.golang.org/protobuf/types/known/timestamppb"
    "github.com/jackc/pgx/v5/pgtype"
    

    "github.com/boomskats/libraryexample/gen/library/api/v1"
    db "github.com/yourusername/yourproject/db/sqlc" // Replace with your actual SQLC path
)


// ToProto converts a DB Book to a Proto Book
func BookToProto(in *db.Book) *library.api.v1.Book {
    if in == nil {
        return nil
    }
    
    return &library.api.v1.Book{
        Id: in.ID,
        Title: in.Title,
        Author: in.Author,
        Isbn: in.Isbn,
        PublishedOn: func() *timestamppb.Timestamp { t := in.PublishedOn.Time; return timestamppb.New(time.Date(t.Year(), t.Month(), t.Day(), 0, 0, 0, 0, time.UTC)) }(),
        PageCount: in.PageCount,
        Genre: in.Genre,
        Summary: func() string { if in.Summary.Valid { return in.Summary.String } return "" }(),
        InStock: in.InStock,
        AddedAt: timestamppb.New(in.AddedAt),
    }
}

// FromProto converts a Proto Book to a DB Book
func BookFromProto(in *library.api.v1.Book) *db.Book {
    if in == nil {
        return nil
    }
    
    return &db.Book{
        ID: in.Id,
        Title: in.Title,
        Author: in.Author,
        Isbn: in.Isbn,
        PublishedOn: pgtype.Date{Time: in.PublishedOn.AsTime(), Valid: in.PublishedOn != nil},
        PageCount: in.PageCount,
        Genre: in.Genre,
        Summary: pgtype.Text{String: in.Summary, Valid: in.Summary != ""},
        InStock: in.InStock,
        AddedAt: in.AddedAt.AsTime(),
    }
}


// ToProto converts a DB Loan to a Proto Loan
func LoanToProto(in *db.Loan) *library.api.v1.Loan {
    if in == nil {
        return nil
    }
    
    return &library.api.v1.Loan{
        Id: in.ID,
        BookId: in.BookID,
        MemberId: in.MemberID,
        LoanDate: timestamppb.New(in.LoanDate),
        DueDate: timestamppb.New(in.DueDate),
        ReturnedDate: func() *timestamppb.Timestamp { if in.ReturnedDate.Valid { return timestamppb.New(in.ReturnedDate.Time) } return nil }(),
        Status: in.Status,
    }
}

// FromProto converts a Proto Loan to a DB Loan
func LoanFromProto(in *library.api.v1.Loan) *db.Loan {
    if in == nil {
        return nil
    }
    
    return &db.Loan{
        ID: in.Id,
        BookID: in.BookId,
        MemberID: in.MemberId,
        LoanDate: in.LoanDate.AsTime(),
        DueDate: in.DueDate.AsTime(),
        ReturnedDate: pgtype.Timestamptz{Time: in.ReturnedDate.AsTime(), Valid: in.ReturnedDate != nil},
        Status: in.Status,
    }
}


// ToProto converts a DB Member to a Proto Member
func MemberToProto(in *db.Member) *library.api.v1.Member {
    if in == nil {
        return nil
    }
    
    return &library.api.v1.Member{
        Id: in.ID,
        Name: in.Name,
        Email: in.Email,
        Phone: func() string { if in.Phone.Valid { return in.Phone.String } return "" }(),
        JoinDate: func() *timestamppb.Timestamp { t := in.JoinDate.Time; return timestamppb.New(time.Date(t.Year(), t.Month(), t.Day(), 0, 0, 0, 0, time.UTC)) }(),
        ExpiryDate: func() *timestamppb.Timestamp { t := in.ExpiryDate.Time; return timestamppb.New(time.Date(t.Year(), t.Month(), t.Day(), 0, 0, 0, 0, time.UTC)) }(),
        IsActive: in.IsActive,
    }
}

// FromProto converts a Proto Member to a DB Member
func MemberFromProto(in *library.api.v1.Member) *db.Member {
    if in == nil {
        return nil
    }
    
    return &db.Member{
        ID: in.Id,
        Name: in.Name,
        Email: in.Email,
        Phone: pgtype.Text{String: in.Phone, Valid: in.Phone != ""},
        JoinDate: pgtype.Date{Time: in.JoinDate.AsTime(), Valid: in.JoinDate != nil},
        ExpiryDate: pgtype.Date{Time: in.ExpiryDate.AsTime(), Valid: in.ExpiryDate != nil},
        IsActive: in.IsActive,
    }
}

