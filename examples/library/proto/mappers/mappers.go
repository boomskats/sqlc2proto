// Code generated by sqlc2proto; DO NOT EDIT.
// IMPORTANT: This file imports protobuf-generated Go code that must be created by running buf generate.
// If you see import errors, make sure to run buf generate on your proto files first.
package mappers

import (
    
    "time"
    "google.golang.org/protobuf/types/known/timestamppb"
    "github.com/jackc/pgx/v5/pgtype"
    
    pb "github.com/boomskats/sqlc2proto/examples/library/proto"
    db "github.com/boomskats/sqlc2proto/examples/library/db/sqlc"
)


// Helper function to convert pgtype.Date to *timestamppb.Timestamp
func dateToTimestamp(v pgtype.Date) *timestamppb.Timestamp {
	t := v.Time
	return timestamppb.New(time.Date(t.Year(), t.Month(), t.Day(), 0, 0, 0, 0, time.UTC))
}

// Helper function to convert *timestamppb.Timestamp to pgtype.Date
func timestampToDate(v *timestamppb.Timestamp) pgtype.Date {
	return pgtype.Date{
		Time:  v.AsTime(),
		Valid: v != nil,
	}
}

// Helper function to convert pgtype.Timestamptz to *timestamppb.Timestamp
func timestamptzToTimestamp(v pgtype.Timestamptz) *timestamppb.Timestamp {
	if v.Valid {
		return timestamppb.New(v.Time)
	}
	return nil
}

// Helper function to convert *timestamppb.Timestamp to pgtype.Timestamptz
func timestampToTimestamptz(v *timestamppb.Timestamp) pgtype.Timestamptz {
	return pgtype.Timestamptz{
		Time:  v.AsTime(),
		Valid: v != nil,
	}
}

// Helper function to convert pgtype.Text to string
func pgtypeTextToString(v pgtype.Text) string {
	if v.Valid {
		return v.String
	}
	return ""
}

// Helper function to convert string to pgtype.Text
func stringToPgtypeText(v string) pgtype.Text {
	return pgtype.Text{
		String: v,
		Valid:  v != "",
	}
}


// ToProto converts a DB Book to a Proto Book
func BookToProto(in *db.Book) *pb.Book {
    if in == nil {
        return nil
    }
    
    return &pb.Book{
        Id: in.ID,
        Title: in.Title,
        Author: in.Author,
        Isbn: in.Isbn,
        PublishedOn: dateToTimestamp(in.PublishedOn),
        PageCount: in.PageCount,
        Genre: in.Genre,
        Summary: pgtypeTextToString(in.Summary),
        InStock: in.InStock,
        AddedAt: timestamppb.New(in.AddedAt),
    }
}

// FromProto converts a Proto Book to a DB Book
func BookFromProto(in *pb.Book) *db.Book {
    if in == nil {
        return nil
    }
    
    return &db.Book{
        ID: in.Id,
        Title: in.Title,
        Author: in.Author,
        Isbn: in.Isbn,
        PublishedOn: timestampToDate(in.PublishedOn),
        PageCount: in.PageCount,
        Genre: in.Genre,
        Summary: stringToPgtypeText(in.Summary),
        InStock: in.InStock,
        AddedAt: in.AddedAt.AsTime(),
    }
}


// ToProto converts a DB Loan to a Proto Loan
func LoanToProto(in *db.Loan) *pb.Loan {
    if in == nil {
        return nil
    }
    
    return &pb.Loan{
        Id: in.ID,
        BookId: in.BookID,
        MemberId: in.MemberID,
        LoanDate: timestamppb.New(in.LoanDate),
        DueDate: timestamppb.New(in.DueDate),
        ReturnedDate: timestamptzToTimestamp(in.ReturnedDate),
        Status: in.Status,
    }
}

// FromProto converts a Proto Loan to a DB Loan
func LoanFromProto(in *pb.Loan) *db.Loan {
    if in == nil {
        return nil
    }
    
    return &db.Loan{
        ID: in.Id,
        BookID: in.BookId,
        MemberID: in.MemberId,
        LoanDate: in.LoanDate.AsTime(),
        DueDate: in.DueDate.AsTime(),
        ReturnedDate: timestampToTimestamptz(in.ReturnedDate),
        Status: in.Status,
    }
}


// ToProto converts a DB Member to a Proto Member
func MemberToProto(in *db.Member) *pb.Member {
    if in == nil {
        return nil
    }
    
    return &pb.Member{
        Id: in.ID,
        Name: in.Name,
        Email: in.Email,
        Phone: pgtypeTextToString(in.Phone),
        JoinDate: dateToTimestamp(in.JoinDate),
        ExpiryDate: dateToTimestamp(in.ExpiryDate),
        IsActive: in.IsActive,
    }
}

// FromProto converts a Proto Member to a DB Member
func MemberFromProto(in *pb.Member) *db.Member {
    if in == nil {
        return nil
    }
    
    return &db.Member{
        ID: in.Id,
        Name: in.Name,
        Email: in.Email,
        Phone: stringToPgtypeText(in.Phone),
        JoinDate: timestampToDate(in.JoinDate),
        ExpiryDate: timestampToDate(in.ExpiryDate),
        IsActive: in.IsActive,
    }
}

